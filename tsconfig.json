{
  "compilerOptions": {
    "target": "ES5" /* 编译后的目标javascript版本， ES5, ES6/ES2015, ES2016, ES2017, ES2018, ES2019, ES2020, ESNext */,
    "module": "commonJs" /* 指定生成哪个模块系统代码 */,
    "moduleResolution": "node" /* 决定了我们编译器的工作方式，"node" and "classic", 但classic在2019年已经废弃，现在只剩node可以选择了 */,
    "strict": true /* 严格模式 */,
    "sourceMap": true /* 映射源文件作用 */,
    "lib": [
      "DOM" /* 允许 dom 操作，比如 document.getElementById('app') */,
      "ESNext"
    ],
    "jsx": "react-jsx" /* 允许编译器支持编译 react 代码 */,
    "esModuleInterop": true /* 允许我们使用commonjs的方式import默认文件， import React from 'react' */,
    "noUnusedLocals": true /* 如果有未使用的局部变量则抛错 */,
    "noUnusedParameters": true /* 如果有未使用的参数则抛错 */,
    "allowSyntheticDefaultImports": true /* import * as React from "react" -> import React from "react"  */,
    "isolatedModules": true /* 将每个文件作为单独的模块（类似于“ts.transpile module”）。*/,
    "forceConsistentCasingInFileNames": true /* 禁止不一致地引用同一文件。*/,
    "resolveJsonModule": true /* 是否允许解析 json  */,
    "noEmit": true /* 表示当前发生错误的时候，编译器不会生成 js 代码 */,
    "baseUrl": "./",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src/**/*"]
}
